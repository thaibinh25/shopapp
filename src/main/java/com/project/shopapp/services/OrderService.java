package com.project.shopapp.services;

import com.project.shopapp.dtos.CartItemDTO;
import com.project.shopapp.dtos.NotificationDTO;
import com.project.shopapp.dtos.OrderDTO;
import com.project.shopapp.exception.DataNotFoundException;
import com.project.shopapp.models.*;
import com.project.shopapp.repositories.*;
import lombok.RequiredArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
@RequiredArgsConstructor
public class OrderService implements IOrderService{
    private final UserRepository userRepository;
    private final OrderRepository orderRepository;
    private final ModelMapper modelMapper;
    private final ProductRepository productRepository;
    private final OrderDetailRepository orderDetailRepository;
    private final CouponRepository couponRepository;
    private final EmailService emailService;
    private final NotificationService notificationService;

    @Override
    @Transactional
    public Order createOrder(OrderDTO orderDTO) throws  Exception {
        //t√¨m user theo userid c√≥ t·ªìn t·∫°i kh√¥ng
        User user = userRepository
                .findById(orderDTO.getUserId())
                .orElseThrow(()->new DataNotFoundException("Cannot find user with id "+orderDTO.getUserId()));
        //convert oderDTO => Oder
        //t·∫°o lu·ªìng b·∫£ng √°nh x·∫° ri√™ng ƒë·ªÉ ki·ªÉm so√°t vi·ªác √°nh x·∫°
        modelMapper.typeMap(OrderDTO.class,Order.class)
                .addMappings(mapper -> mapper.skip(Order::setId));
        //c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c·ªßa ƒë∆°n h√†ng t·ª´ orderDTO
        Order order = new Order();
        modelMapper.map(orderDTO,order);
        order.setUser(user);
        order.setOrderDate(new Date());
        order.setStatus(OrderStatus.PENDING);
        //ki·ªÉm tra shpping date ph·∫£i >= ngay h√¥m nay
        //LocalDate shippingDate = orderDTO.getShippingDate() == null ? LocalDate.now(): orderDTO.getShippingDate();
        LocalDate shippingDate = LocalDate.now().plusDays(2); // Giao h√†ng sau 2 ng√†y
        if (shippingDate.isBefore(LocalDate.now())){
            throw new DataNotFoundException("Date must be at last today !!");
        }
        order.setShippingDate(shippingDate);
        order.setActive(true);
        //ƒë·ªãa ch·ªâ giao h√†ng
        order.setZipCode(orderDTO.getZipCode());
        order.setPrefecture(orderDTO.getPrefecture());
        order.setCity(orderDTO.getCity());
        order.setAddressLine1(orderDTO.getAddressLine1());
        order.setAddressLine2(orderDTO.getAddressLine2());
        //order.setTotalMoney(orderDTO.getTotalMoney());
        orderRepository.save(order);

        //t·∫°o danh s√°ch c√°c ƒë·ªëi t∆∞∆°ng orderDetail t·ª´ cartItems
        List<OrderDetail> orderDetails = new ArrayList<>();
        float totalMoney = 0;

        for (CartItemDTO cartItemDTO: orderDTO.getCartItems()){
            //t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng orderDetail t·ª´ CartItemDTO
            OrderDetail orderDetail = new OrderDetail();
            orderDetail.setOrder(order);

            //l·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ cartItemDTO
            Long productId = cartItemDTO.getProductId();
            int quantity = cartItemDTO.getQuantity();

            //t√¨m th√¥ng tin s·∫£n ph·∫©m t·ª´ database (ho·∫∑c t·ª´ cache n·∫øu c·∫ßn)
            Product product = productRepository.findById(productId)
                    .orElseThrow(()-> new DataNotFoundException("Product not found with  id : "+ productId));

            //ƒê·∫∑t th√¥ng tin cho orderDetail
            orderDetail.setProduct(product);
            orderDetail.setNumberOfProducts(quantity);
            orderDetail.setPrice(product.getPrice());

            //th√™m orderdetail v√†o danh s√°ch
            orderDetails.add(orderDetail);

            totalMoney += product.getPrice() * quantity;

        }
        if (orderDTO.getCouponCode() != null && !orderDTO.getCouponCode().isEmpty()) {
            try {
                double discount = applyCoupon(orderDTO);
                float total = (float) (orderDTO.getTotalMoney() - discount);
                order.setTotalMoney(total > 0 ? total : 0);
            } catch (Exception e) {
                throw new RuntimeException("Coupon kh√¥ng h·ª£p l·ªá: " + e.getMessage());
            }
        } else {
            order.setTotalMoney(orderDTO.getTotalMoney());
        }

        orderDetailRepository.saveAll(orderDetails);

        // G·ª≠i email th√¥ng b√°o
        String subject = "üõí C√≥ ƒë∆°n h√†ng m·ªõi t·ª´ " + order.getFullName();
        String content = String.format("Kh√°ch h√†ng: %s\nT·ªïng ti·ªÅn: %.2fusd\nPh∆∞∆°ng th·ª©c: %s",
                order.getFullName(), order.getTotalMoney(), order.getPaymentMethod());

        emailService.sendOrderNotification("tranthaibinh1998@gmail.com", subject, content);


        notificationService.createAndSendNotification(NotificationDTO.builder()
                .userId(order.getUser().getId())
                .title("ƒê·∫∑t h√†ng th√†nh c√¥ng")
                .content("C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng. M√£ ƒë∆°n h√†ng: #" + order.getId())
                .build());


        return order;
    }

    @Override
    public Order getOrder(Long id) throws DataNotFoundException {
        return orderRepository.findById(id).orElseThrow(
                ()->new DataNotFoundException("null @@ ")
        );
    }

    @Override
    @Transactional
    public Order updateOrder(Long id, OrderDTO orderDTO) throws DataNotFoundException {
        Order order = orderRepository.findById(id).orElseThrow(() ->
                new DataNotFoundException("Cannot find order with id: " + id));
        User existingUser = userRepository.findById(
                orderDTO.getUserId()).orElseThrow(() ->
                new DataNotFoundException("Cannot find user with id: " + id));
        // T·∫°o m·ªôt lu·ªìng b·∫£ng √°nh x·∫° ri√™ng ƒë·ªÉ ki·ªÉm so√°t vi·ªác √°nh x·∫°
        modelMapper.typeMap(OrderDTO.class, Order.class)
                .addMappings(mapper -> mapper.skip(Order::setId));
        // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c·ªßa ƒë∆°n h√†ng t·ª´ orderDTO
        modelMapper.map(orderDTO, order);
        order.setUser(existingUser);
        return orderRepository.save(order);
    }

    @Override
    public Order updateOrderStatus(Long orderId, String status) throws DataNotFoundException {
        // T√¨m ƒë∆°n h√†ng b·∫±ng id
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new DataNotFoundException("Order not found with id " + orderId));

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi
        order.setStatus(status);



        // T·∫°o th√¥ng b√°o cho ng∆∞·ªùi d√πng
        NotificationDTO noti = NotificationDTO.builder()
                .userId(order.getUser().getId())
                .title("C·∫≠p nh·∫≠t ƒë∆°n h√†ng")
                .content("ƒê∆°n h√†ng #" + order.getId() + " ƒë√£ chuy·ªÉn sang tr·∫°ng th√°i: " + status)
                .build();

        notificationService.createAndSendNotification(noti); // ‚úÖ G·ª≠i real-time


        return orderRepository.save(order);
    }


    @Override
    @Transactional
    public void deleteOrder(Long id) {
        Order order = orderRepository.findById(id).orElseThrow(null);
        //xo√° m·ªÅm ƒë∆°n h√†ng
        if (order!=null){
            order.setActive(false);
            orderRepository.save(order);
        }

    }

    @Override
    public List<Order> findByUserId(Long userId) {
        return orderRepository.findByUserId(userId);
    }

    @Override
    public Page<Order> getOrderByKeyword(String keyword, Pageable pageable){
        return orderRepository.findByKeyword(keyword,pageable);
    }

    private double applyCoupon(OrderDTO orderDTO) {
        String couponCode = orderDTO.getCouponCode();
        if (couponCode == null || couponCode.isEmpty()) {
            return 0;
        }

        Coupon coupon = couponRepository.findByCodeAndActiveTrue(couponCode)
                .orElseThrow(() -> new IllegalArgumentException("M√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≤n hi·ªáu l·ª±c"));


        if (coupon.getExpiryDate().isBefore(LocalDate.now())) {
            throw new IllegalArgumentException("M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n");
        }

        double discount = coupon.isPercentage()
                ? orderDTO.getTotalMoney() * (coupon.getDiscountValue() / 100)
                : coupon.getDiscountValue();

        return discount;
    }


}
